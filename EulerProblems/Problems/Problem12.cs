using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Problems
{
    public class Problem12:EulerProblem
    {
        private static string format = "The first triangular number with >= {0} divisors is {1}.";
        private static int numberCount = 1000000;
        private static int factorCount = 500;

        protected override void SetProblemText()
        {
            problemText = "Problem 12:\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?";
        }

        public override void Run()
        {
            result = 0;
            
            int maxCount = 0;
            List<long> numbers = EulerMath.TriangularNumbers(numberCount);
            for (int i = 0; i < numberCount; i++)
            {
                //Console.WriteLine("Checking triangular number #{0}: {1}", i + 1, numbers[i]);
                Dictionary<int, int> factors = EulerMath.PrimeFactors(numbers[i]);
                int count = CountOfDivisors(factors);
                if (count > maxCount)
                {
                    maxCount = count;
                    result = numbers[i];
                    //Console.WriteLine("Triangular number #{0}: {1} has {2} divisors.", i, numbers[i], count);
                    if (count >= factorCount)
                    {
                        break;
                    }
                }
            }
            /*
            for (int i = 100; i <= 3000; i += 100)
            {
                TimeSpan start = Process.GetCurrentProcess().TotalProcessorTime;
                long testResult = TestRunner(i, factorCount);
                TimeSpan end = Process.GetCurrentProcess().TotalProcessorTime;
                
                //Console.WriteLine("Test for i = {0} gave result {1} and took {2} ms.",i,testResult,(end - start).TotalMilliseconds);
                Console.WriteLine("{0}", (end - start).TotalMilliseconds);
            }
            */
            stringResult = String.Format(format, factorCount, result);
        }

        private long TestRunner(int numberCount, int targetFactors)
        {
            long triangularNumber = 0;

            int maxCount = 0;
            List<long> numbers = EulerMath.TriangularNumbers(numberCount);
            for (int i = 0; i < numberCount; i++)
            {
                //Console.WriteLine("Checking triangular number #{0}: {1}", i + 1, numbers[i]);
                Dictionary<int, int> factors = EulerMath.PrimeFactors(numbers[i]);
                int count = CountOfDivisors(factors);
                if (count > maxCount)
                {
                    maxCount = count;
                    triangularNumber = numbers[i];
                    //Console.WriteLine("Triangular number #{0}: {1} has {2} divisors.", i, numbers[i], count);
                    if (count >= factorCount)
                    {
                        break;
                    }
                }
            }
            return triangularNumber;
        }

        private int CountOfDivisors(Dictionary<int,int> factors)
        {
            int result = 1;

            foreach(int key in factors.Keys){
                result *= factors[key] + 1;
            }

            return result;
        }
    }
}
